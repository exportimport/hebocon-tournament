name: Tournament Testing with Playwright MCP

on:
  pull_request:
    branches: [master]
  push:
    branches: [master]
  workflow_dispatch: # Allow manual triggering

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "20"

jobs:
  tournament-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Playwright
        run: |
          npm install playwright
          npx playwright install --with-deps chromium

      - name: Create test directories
        run: |
          mkdir -p test-results
          mkdir -p test-results/visual-diffs
          chmod +x tests/*.js

      - name: Start Flask server in background
        run: |
          python3 app.py &
          echo $! > flask_server.pid
          sleep 5  # Wait for server to start

      - name: Wait for server to be ready
        run: |
          timeout 30 bash -c 'until curl -f http://localhost:5005/api/data; do sleep 1; done'

      - name: Run Basic API Tests
        run: |
          # Basic API validation
          curl -f http://localhost:5005/api/data
          curl -f http://localhost:5005/
          curl -f http://localhost:5005/overlay
          echo "âœ… All endpoints accessible"

      - name: Run Simple Playwright Test
        run: |
          # Create simple test that doesn't require MCP server
          cat > simple-test.js << 'EOF'
          const { chromium } = require('playwright');
          
          (async () => {
            console.log('ðŸš€ Starting simple Playwright test...');
            const browser = await chromium.launch();
            const page = await browser.newPage();
            
            // Test control panel loads
            await page.goto('http://localhost:5005');
            await page.waitForSelector('body');
            console.log('âœ… Control panel loaded');
            
            // Test overlay loads  
            await page.goto('http://localhost:5005/overlay');
            await page.waitForSelector('body');
            console.log('âœ… Overlay loaded');
            
            // Take screenshots
            await page.screenshot({ path: 'test-results/control-panel.png' });
            await page.goto('http://localhost:5005/overlay');
            await page.screenshot({ path: 'test-results/overlay.png' });
            
            await browser.close();
            console.log('âœ… Basic tests completed successfully');
          })();
          EOF
          
          node simple-test.js

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            test-results/
          retention-days: 30

      - name: Stop Flask server
        if: always()
        run: |
          if [ -f flask_server.pid ]; then
            kill $(cat flask_server.pid) || true
            rm flask_server.pid
          fi

      - name: Generate test summary
        if: always()
        run: |
          echo "## ðŸŽ® Tournament Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Basic Tests Completed:" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Flask server startup" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… API endpoints accessible" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Control panel loads" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… OBS overlay loads" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -f test-results/control-panel.png ]; then
            echo "ðŸ“¸ Screenshots captured successfully" >> $GITHUB_STEP_SUMMARY
          fi